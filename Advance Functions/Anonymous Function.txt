1. Functions in js are first-class citizens; they can be assigned to variables.
2. Functions defined without a name, often assigned to a variable.
3. Anonymous Functions can be properties in objects
4. can be passed as arguments to other Functions.
5. Invoked using () after the function name or variable.
6. console.log(myfunction) and typeof myfunction will both indicate it's function.

For example:
let sum = function(num1, num2){
    return num1 + num2;
}


// Arrow Functions
1. A concise way to write Anonymous Functions.
2. For single arguments: Round brackets optionl.
3. For single Line: curly brackets and return optionl.
4. Often used when passing functions as arguments.

Example:
let sum = function(num1, num2) {
    return num1 + num2;
}

let sum1 = (num1, num2) =>{
    return num1 + num2;
}

let sum2 = (num1, num2) => num1 + num2;
let square = num => num * num;


// setTimeout & setInterval
1. Functions for executing code asynchronously after a delay.
2. setTimeout runs once; setInterval runs repeatedly
3. setTimeout:
    . Syntax: setTimeout(function, time)
    . Cancel: clearTimeout(timerID)
4. setInterval:
    . Syntax: setInterval(function, time)
    . Cancel: clearInterval(intervalId)

// For each loop
1. A method for array iteration, often preferred for readability.
2. Parameters: one for item, optional second for index.
3. Using return is similar to continue in traditional loops.
4. Not straightforward to break out of a forEach loop.
5. When you need to perform an action on each array element and don't need to break early.

Example:
let foods = ['bread', 'rice', 'meat', 'pizza'];

foods.forEach(function(food){
    console.log(food)
})


//Array MEthods
1. Filter Method:
    . Syntax: array.filter((value, index) => return true/false)
    . Use: Filters elements based on condition.
2. Map Method:
    . Syntax: array.map((value) => return newValue)
    . Use: Trabsform each element.


//Reduce Method:
The reduce() method is used to reduce the elements of an array to a single value. It executes a provided function for each element of the array, resulting in a single output value. The syntax for reduce() is as follows:

Syntax: array.reduce(callback(accumulator, currentValue[, currentIndex, array])[, initialValue])

. callback: Function to execute on each element of the array, taking four arguments:

. accumulator: The accumulator accumulates the callback's return values. It is the accumulated value previously returned in the last invocation of the callback, or initialValue, if supplied.

. currentValue: The current element being processed in the array.
currentIndex (optional): The index of the current element being processed in the array.

. array (optional): The array reduce() was called upon.

. initialValue (optional): A value to use as the first argument to the first call of the callback function. If no initialValue is supplied, the first element in the array will be used as the initial accumulator value, and currentValue will start from the second element.

Example:

const numbers = [1, 2, 3, 4, 5];
const sum = numbers.reduce((accumulator, currentValue) => accumulator + currentValue, 0);
console.log(sum); // Output: 15 (1 + 2 + 3 + 4 + 5)


Note: reduce() can be used for various purposes like summing elements, finding maximum/minimum values, flattening arrays, and more, depending on the logic defined in the callback function.